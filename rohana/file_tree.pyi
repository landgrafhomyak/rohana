from typing import overload, Any, Literal, TypeVar, Generic, Iterator, NoReturn, final, Sequence, Mapping

_DO = TypeVar("_DO")
_FO = TypeVar("_FO")


@final
class builder(Generic[_DO, _FO]):
    def __new__(cls, directory_iterator: Iterator[_DO], /) -> builder: ...

    def __iter__(self, /) -> builder: ...

    def __next__(self, /) -> _DO: ...

    def enter(self, directory_name: str, directory_iterator: Iterator[_DO], /) -> NoReturn: ...

    def leave(self, /) -> NoReturn: ...

    def push(self, file_name: str, file_object: _FO, /) -> NoReturn: ...

    def __sizeof__(self, /) -> int: ...

    def __bool__(self, /) -> bool: ...


@final
class file_tree(Generic[_FO]):
    @final
    class path:
        def __str__(self, /) -> str: ...

        def __repr__(self, /) -> str: ...

    @final
    class paths_view:
        def __iter__(self, /) -> file_tree.paths_iterator: ...

    @final
    class paths_iterator:
        def __iter__(self, /) -> file_tree.paths_iterator: ...

        def __next__(self, /) -> file_tree.path: ...

    @final
    class values_view(Generic[_FO]):
        def __iter__(self, /) -> file_tree.values_iterator[_FO]: ...

    @final
    class values_iterator(Generic[_FO]):
        def __iter__(self, /) -> file_tree.values_iterator[_FO]: ...

        def __next__(self, /) -> _FO: ...

    @final
    class items_view(Generic[_FO]):
        def __iter__(self, /) -> file_tree.items_iterator[_FO]: ...

    @final
    class items_iterator(Generic[_FO]):
        def __iter__(self, /) -> file_tree.items_iterator[_FO]: ...

        def __next__(self, /) -> file_tree.item[_FO]: ...

    @final
    class item(Generic[_FO]):
        @final
        class iterator(Generic[_FO]):
            def __iter__(self, /) -> file_tree.item.iterator: ...

            @overload
            def __next__(self, /) -> file_tree.path: ...

            @overload
            def __next__(self, /) -> _FO: ...

        def __iter__(self, /) -> iterator[_FO]: ...

        @overload
        def __getitem__(self, i: Literal[0], /) -> file_tree.path: ...

        @overload
        def __getitem__(self, i: Literal[1], /) -> _FO: ...

        @property
        def path(self, /) -> file_tree.path: ...

        @property
        def value(self, /) -> _FO: ...

        @value.setter
        def value(self, o: _FO, /) -> NoReturn: ...

    @final
    class dirs_view(Generic[_FO]):
        def __iter__(self, /) -> file_tree.dirs_iterator[_FO]: ...

    @final
    class dirs_iterator(Generic[_FO]):
        def __iter__(self, /) -> file_tree.dirs_iterator[_FO]: ...

        def __next__(self, /) -> file_tree.dir[_FO]: ...

    @final
    class dir(Generic[_FO]):
        @final
        class path_view:
            def __iter__(self, /) -> file_tree.dir.path_iterator: ...

        @final
        class path_iterator:
            def __iter__(self, /) -> file_tree.dir.path_iterator: ...

            def __next__(self, /) -> file_tree.path: ...

        @final
        class value_view(Generic[_FO]):
            def __iter__(self, /) -> file_tree.dir.value_iterator[_FO]: ...

        @final
        class value_iterator(Generic[_FO]):
            def __iter__(self, /) -> file_tree.dir.value_iterator[_FO]: ...

            def __next__(self, /) -> _FO: ...

        @final
        class items_view(Generic[_FO]):
            def __iter__(self, /) -> file_tree.dir.items_iterator[_FO]: ...

        @final
        class items_iterator(Generic[_FO]):
            def __iter__(self, /) -> file_tree.dir.items_iterator[_FO]: ...

            def __next__(self, /) -> file_tree.item[_FO]: ...

        def __iter__(self, /) -> items_iterator[_FO]: ...

        def paths(self, /) -> path_view: ...

        def values(self, /) -> value_view[_FO]: ...

        def items(self, /) -> items_view[_FO]: ...

    def __iter__(self, /) -> items_iterator[_FO]: ...

    def paths(self, /) -> paths_view: ...

    def values(self, /) -> values_view[_FO]: ...

    def items(self, /) -> items_view[_FO]: ...

    def dirs(self, /) -> dirs_view[_FO]: ...

    # def __getitem__(self, item: path, /) -> __FO: ...
    #
    # def __setitem__(self, key: key, path: __FO, /) -> NoReturn: ...
    #
    # def _release_cache(self, /) -> NoReturn: ...


def compile(b: builder[Any, _FO], /) -> file_tree[_FO]: ...
